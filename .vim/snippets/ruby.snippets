# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby

# New Block
snippet =b
	=begin rdoc
		${1}
	=end
snippet req
	require "${1}"${2}
snippet end
	__END__
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet defi
	def initialize(${1:args})
		${2}
	end
snippet deft
	def test_${1:case_name}
		${2}
	end
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}

		${2}

	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
snippet tc
	require File.dirname(__FILE__) + '/../test_helper'

	require '${1:library_file_name}'

	class Test${2:} < Test::Unit::TestCase

		def test_${3:case_name}
			${4}
		end

	end
snippet tcs
	require 'rubygems'
	require 'test/unit'
	require 'shoulda'

	require '${1:library_file_name}'

	class Test${2:name} < Test::Unit::TestCase

		${3:}

	end
snippet sh
	should "${1:should}" do
	  ${2:}
	end
snippet cont
	context "${1:context}" do
	  ${2:}
	end
snippet it
	it "${1:should}" do
	  ${2:}
	end
snippet desc
	describe ${1:name} do
	  ${2:}
	end	
snippet as
	assert ${1:test}, "${2:Failure message.}"${3}
snippet ase
	assert_equal ${1:expected}, ${2:actual}${3}
snippet asne
	assert_not_equa ${1:unexpected}, ${2:actual} ${3}
snippet asid
	assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2 ** -20} ${4}
snippet asio
	assert_instance_of ${1:ExpectedClass}, ${2:actual_instance} ${3}
snippet asko
	assert_kind_of ${1:ExpectedKind}, ${2:actual_instance} ${3}
snippet asn
	assert_nil ${1:instance} ${2}
snippet asnn
	assert_not_nil ${1:instance} ${2}
snippet asm
	assert_match /${1:expected_pattern}/, ${2:actual_string} ${3}
snippet asnm
	assert_no_match /${1:unexpected_pattern}/, ${2:actual_string} ${3}
snippet aso
	assert_operator ${1:left}, :${2:operator}, ${3:right} ${4}
snippet asr
	assert_raise ${1:Exception} { ${2} }
snippet asnr
	assert_nothing_raised ${1:Exception} { ${2} }
snippet asrt
	assert_respond_to ${1:object}, :${2:method} ${3}
snippet ass assert_same(..)
	assert_same ${1:expected}, ${2:actual} ${3}
snippet ass assert_send(..)
	assert_send [${1:object}, :${2:message}, ${3:args}] ${4}
snippet asns
	assert_not_same ${1:unexpected}, ${2:actual} ${3}
snippet ast
	assert_throws :${1:expected} { ${2} }
snippet asnt
	assert_nothing_thrown { ${1} }
